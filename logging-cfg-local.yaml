version: 1
disable_existing_loggers: False # this allow to get logger at module level

root:
  handlers:
    - console
    - file-standard
    - file-json
  level: DEBUG
  propagate: True

# Remove all handlers for werkzeug log entries - prevents duplicated logging
loggers:
  werkzeug:
    handlers: []
  gunicorn.error:
    level: DEBUG
    handlers:
      - console
  gunicorn.access:
    level: DEBUG
    handlers:
      - console
  botocore:
    level: INFO
  boto3:
    level: INFO

filters:

  isotime:
    (): logging_utilities.filters.TimeAttribute
    isotime: False
    utc_isotime: True
  flask:
    (): logging_utilities.filters.flask_attribute.FlaskRequestAttribute
    attributes:
      - path
      - method
      - headers
      - remote_addr
      - json
      - query_string

formatters:
  standard:
    format: "[%(asctime)s] %(levelname)-8s - %(name)-26s : %(message)s"
  verbose:
    format: "[%(asctime)s] %(levelname)-8s - %(name)-26s : %(message)s : path=%(flask_request_path)s headers=%(flask_request_headers)s payload=%(flask_request_json)s"
  json:
    (): logging_utilities.formatters.json_formatter.JsonFormatter
    add_always_extra: False
    filter_attributes:
      - utc_isotime
      - flask_request_path
      - flask_request_method
      - flask_request_query_string
      - flask_request_headers
      - flask_request_json
      - flask_request_remote_addr
    remove_empty: True
    ignore_missing: True
    fmt:
      time: utc_isotime
      level: levelname
      logger: name
      module: module
      function: funcName
      pidTid: "%(process)x/%(thread)x"
      excInfo: exc_info
      request:
        id: flask_request_headers.X-Amz-Cf-Id
        path: flask_request_path
        method: flask_request_method
        queryString: flask_request_query_string
        headers:
          Content-Type: flask_request_headers.Content-Type
          Content-Length: flask_request_headers.Content-Length
          Cloudfront-Forwarded-Proto: flask_request_headers.Cloudfront-Forwarded-Proto
          Content-Encoding: flask_request_headers.Content-Encoding
          Origin: flask_request_headers.Origin
          Referer: flask_request_headers.Referer
          Accept: flask_request_headers.Accept
          Accept-Encoding: flask_request_headers.Accept-Encoding
          Accept-Language: flask_request_headers.Accept-Language
          User-Agent: flask_request_headers.User-Agent
          If-None-Match: flask_request_headers.If-None-Match
          Sec-Fetch-Mode: flask_request_headers.Sec-Fetch-Mode
          Sec-Fetch-Site: flask_request_headers.Sec-Fetch-Site
          Sec-CH-UA: flask_request_headers.Sec-CH-UA
          Sec-CH-UA-Mobile: flask_request_headers.Sec-CH-UA-Mobile
          Sec-CH-UA-Platform: flask_request_headers.Sec-CH-UA-Platform
          Sec-CH-UA-Model: flask_request_headers.Sec-CH-UA-Model
        remoteAddr: flask_request_remote_addr
        payload: "%(flask_request_json).128s"
      response:
        statusCode: response.status_code
        headers:
          Cache-Control: response.headers.Cache-Control
          Expires: response.headers.Expires
          Content-Type: response.headers.Content-Type
          Content-Length: response.headers.Content-Length
          Content-Encoding: response.headers.Content-Encoding
          Access-Control-Allow-Headers: response.headers.Access-Control-Allow-Headers
          Access-Control-Allow-Methods: response.headers.Access-Control-Allow-Methods
          Access-Control-Allow-Origin: response.headers.Access-Control-Allow-Origin
          ETag: response.headers.ETag
        duration: response.duration
        payload: "%(response.payload).128s"
      message: message

handlers:
  console:
    class: logging.StreamHandler
    formatter: standard
    stream: ext://sys.stdout
    filters:
      - isotime
      - flask
  file-standard:
    level: DEBUG
    class: logging.FileHandler
    formatter: verbose
    filename: ${LOGS_DIR}/server-standard-logs.txt
    mode: w
    filters:
      - isotime
      - flask
  file-json:
    level: DEBUG
    class: logging.FileHandler
    formatter: json
    filename: ${LOGS_DIR}/server-json-logs.json
    mode: w
    filters:
      - isotime
      - flask
